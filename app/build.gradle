apply plugin: 'com.android.application'
apply plugin: 'stringfog'

stringfog {
    // 这是加解密key，可以自由定义。
    key 'Hello World'
    // 开关
    enable true
    // 加解密库的实现类路径，需和上面配置的加解密算法库一致。
    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
    // 指定需加密的代码包路径，可配置多个，未指定将默认全部加密。
    fogPackages = ['com.my.torch', 'com.yanzhenjie.permission']
}

//https://www.cnblogs.com/details-666/p/keystore.html
def keystoreFilepath = ''
def keystorePSW = ''
def keystoreAlias = ''
def keystoreAliasPSW = ''
// default keystore file, PLZ config file path in local.properties
def keyfile = file('s.keystore.temp')

Properties properties = new Properties()
// local.properties file in the root director
properties.load(project.rootProject.file('local.properties').newDataInputStream())
keystoreFilepath = properties.getProperty("keystore.path")

if (keystoreFilepath) {
    keystorePSW = properties.getProperty("keystore.password")
    keystoreAlias = properties.getProperty("keystore.alias")
    keystoreAliasPSW = properties.getProperty("keystore.alias_password")
    keyfile = file(keystoreFilepath)
}

android {

    compileSdkVersion 28

    defaultConfig {
        applicationId "com.my.torch"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 12
        versionName "1.2.0"
    }

    signingConfigs {
        release {
            keyAlias keystoreAlias
            keyPassword keystoreAliasPSW
            storeFile keyfile
            storePassword keystorePSW
            v2SigningEnabled true
            v1SigningEnabled true
        }
    }

    buildTypes {
        release {
            minifyEnabled true // 混淆
            zipAlignEnabled true // Zipalign优化
            shrinkResources true // 移除无用的resource文件
            proguardFiles 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }
}


android.applicationVariants.all { variant ->
    variant.outputs.all {
        //def date = new Date().format("yyyyMMdd" , TimeZone.getTimeZone("Asia/Shanghai"))
        //def date = new Date().format("yyyyMMddHHmmss" , TimeZone.getTimeZone("GMT+08"))
        def date = new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08"))
        if (variant.buildType.name.equals('debug')) {
            outputFileName = "Torch_${date}_${versionName}.apk"
        }
        if (variant.buildType.name.equals('release')) {
            outputFileName = "Torch_${date}_${versionName}.apk"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.yanzhenjie.permission:support:2.0.1'
    //https://github.com/MegatronKing/StringFog
    // 这里要和上面选用的加解密算法库一致，用于运行时解密。
    implementation 'com.github.megatronking.stringfog:xor:1.1.0'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'
}
